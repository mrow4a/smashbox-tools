#!/usr/bin/python
import sys,os, subprocess,time
import matplotlib.pyplot as plt
from influxdb import InfluxDBClient
import numpy as np
from gi.overrides.keysyms import upleftcorner
import matplotlib.mlab as mlab
from scipy.stats import scoreatpercentile


def get_config(path):
    import io    
    path = os.path.abspath(path)    
    if (os.path.exists(path)):
        with io.open(path,'r') as file:
            data = eval(file.read())
        return data 
    else:
        print "path does not exists %s"%path
        sys.exit()
        

def get_low_high(avg,values):
    standard = True
    if standard==False:        
        low, high = [], []
        for value in values:
            if value>avg:
                high.append(value)
            else:
                low.append(value) 
        return np.std(low),np.std(high)  
    else:
        return np.std(values),np.std(values) 
             
def get_hour_from_timestamp(time):
    start = time.find('T') + 1
    end = time.find(':', start)
    return int(time[start:end])

def percentile_sync_runid(results, server):
    fig = plt.figure() 
    fig.suptitle('Monitoring - Histogram - Different Machines\nServer: %s'%(server))
    values = [[],[],[]]
    xTickMarks = []
    xTickGraph_a = []
    xTickGraph_b = []
    global_max = []
        
    for key, objs in results.items() :
        upl_values = []
        dwl_values = []
        tot_values = []
        for obj in objs[0]:
            tot_values.append(obj["value"])
            global_max.append(obj["value"])
        for obj in objs[1]:
            upl_values.append(obj["value"])
            global_max.append(obj["value"])
        for obj in objs[2]:
            dwl_values.append(obj["value"])
            global_max.append(obj["value"])
        values[0].append(np.array(tot_values))
        values[1].append(np.array(upl_values))
        values[2].append(np.array(dwl_values))
        xTickMarks.append(key)
        
    ind = np.arange(len(xTickMarks))    
    global_max= (np.max(global_max)) + 10  
    
    for i in range(0,3):
        ax = fig.add_subplot('13%s'%(i+1))
        for midpoint in range(0,len(xTickMarks)):
            x= values[i][midpoint]
            perc = [min(x), scoreatpercentile(x,5), scoreatpercentile(x,25),
                   scoreatpercentile(x,50), scoreatpercentile(x,75),
                   scoreatpercentile(x,95), max(x)]
            
            ax.broken_barh([(midpoint-.005,.01)], (perc[0], perc[1]-perc[0]), facecolors='black')
            ax.broken_barh([(midpoint-.005,.01)], (perc[5], perc[6]-perc[5]), facecolors='black')
            # 10/90
            ax.broken_barh([(midpoint-.4,.8)], (perc[1], perc[2]-perc[1]), facecolors='b')
            ax.broken_barh([(midpoint-.4,.8)], (perc[4], perc[5]-perc[4]), facecolors='b')
            # 25/75
            ax.broken_barh([(midpoint-.4,.8)], (perc[2], perc[3]-perc[2]), facecolors='y')
            ax.broken_barh([(midpoint-.4,.8)], (perc[3], perc[4]-perc[3]), facecolors='y')
        if i==0:
            ax.set_ylabel('Synchronisation time [s]')
            ax.set_title('Total - Sync')
        elif i==1:
            ax.set_title('Client to Server Sync')
        elif i==2:
            ax.set_title('Server to Client Sync')
            
        ax.set_xlim(left=-0.6, right=1.6)
        ax.set_ylim(top=global_max, bottom=0) 
        ax.set_xticks(ind)
        xtickNames = ax.set_xticklabels(xTickMarks)
        plt.setp(xtickNames, rotation=45, fontsize=12)
        ax.grid(True)
        plt.tight_layout(rect=[0, 0.03, 1, 0.90])
    plt.draw()
    
def compare_monit_cm_hist_sync(results,runid):
    fig = plt.figure() 
    ax = plt.subplot(111)
    values = []
    xTickMarks = []
    xTickGraph = []
    global_max = []
    for key, objs in results.items() :
        tmp_values = []
        for obj in objs:
            tmp_values.append(obj["value"])
        size = len(tmp_values)  
        tmp_values = np.array(tmp_values) 
        global_max.append(np.max(tmp_values))
        values.append(tmp_values)
        
        xTickMarks.append(key)
    
    global_max= (np.max(global_max)) + 10    
    ax.set_xlim(left=0)
    ax.set_xlim(right=global_max)
    ax.set_ylim(top=1.0)
    ind = np.arange(len(xTickMarks))                # the x locations for the groups
    width = 1                      # the width of the bars
    
    # the histogram of the data
    for value in values:
        n, bins, patches = ax.hist(value, bins=100, normed=True, cumulative=True, histtype='step', range=(0,global_max))
        xTickGraph.append(patches[0])
    
    ax.set_xlabel('Synchronisation time [s]')
    ax.set_ylabel('Probability')
    ax.legend(xTickGraph,xTickMarks,fontsize=7,fancybox=True, loc='lower right').get_frame().set_alpha(0.5)
    plt.title('Monitoring - Histogram - Different Servers\nMachine: %s'%(runid))
    plt.grid(True)
    plt.draw()  
    
def compare_monit_cm_hist_transf(results,runid,server):
    def sizeof_fmt(num, suffix='B'):
        for unit in ['','k','M','G','T','P','E','Z']:
            if abs(num) < 1000.0:
                return "%3.0f%s%s" % (num, unit, suffix)
            num /= 1000.0
        return "%.1f%s%s" % (num, 'Yi', suffix)
    
    #transfer graph - UPLOADING
    fig1 = plt.figure() 
    fig1.suptitle('Monitoring - Histogram - Different Servers\nMachine: %s'%(runid))
    ax = fig1.add_subplot(211)
    plt.title("Client to Server Sync\nUploading Rate")  
    Graph = []
    Marks = []
    global_max = []
    global_min = []
    scs_sync_array_time_upl = {}
    scs_sync_array_value_upl = {}
    scs_sync_array_server_upl = {}
    values = {}
    values_syncid_upl = {}
    for key, objs in results.items() :
        scs_sync_array_time_upl[key]=[]
        values[key]=[]
        for scs_sync in objs["scs_syncs_upl"]:
            scs_sync_array_time_upl[key].append(scs_sync["time"])
            scs_sync_array_value_upl[scs_sync["time"]]=scs_sync["value"]
            scs_sync_array_server_upl[scs_sync["time"]]=key
        for obj in objs["upl_upl"]:
            if (int(obj["syncid"]) in scs_sync_array_time_upl[key]):
                values[key].append(obj["value"])
                if values_syncid_upl.has_key(obj["syncid"]):
                    values_syncid_upl[obj["syncid"]].append(obj["time"])
                else:
                    values_syncid_upl[obj["syncid"]]=[obj["time"]]
        for obj in objs["upl_dwl"]:
            if (int(obj["syncid"]) in scs_sync_array_time_upl[key]):
                if values_syncid_upl.has_key(obj["syncid"]):
                    values_syncid_upl[obj["syncid"]].append(obj["time"])
                else:
                    values_syncid_upl[obj["syncid"]]=[obj["time"]]
        values[key] = np.array(values[key])
        global_max.append(np.max(values[key]))
        global_min.append(np.min(values[key]))
    
    global_max = (np.max(global_max))
    global_min = (np.min(global_min))
    
    for key, objs in results.items() :
        histbins = 10 ** np.linspace(np.log10(global_min), np.log10(global_max), 100)
        n, bins, patches = ax.hist(values[key], bins=histbins, normed=True, cumulative=True, histtype='step')
        Graph.append(patches[0]) 
        Marks.append(key)
    
    ax.legend(Graph,Marks,fontsize=7,fancybox=True, loc='upper left').get_frame().set_alpha(0.5)
    ax.set_xscale("log")
    ax.set_xlim(left=0)
    ax.set_xlim(right=global_max)
    ax.set_ylim(top=1.0)
    xtickNames = []
    xticks = ax.get_xticks().tolist()
    for xtick in xticks:
        xtickNames.append(sizeof_fmt(int(xtick)))
    ax.set_xticklabels(xtickNames)
    ax.set_xlabel('Logaritmic scale - Transfer rate [unit/s]')
    plt.grid(True)
    plt.tight_layout(rect=[0, 0.03, 1, 0.95]) 
        
    #transfer graph - DOWNLOADING
    ax = fig1.add_subplot(212)
    plt.title("Server to Client Sync\nDownloading Rate")  
    Graph = []
    Marks = []
    global_max = []
    global_min = []
    scs_sync_array_time_dwl = {}
    scs_sync_array_value_dwl = {}
    scs_sync_array_server_dwl = {}
    values_syncid_dwl = {}
    for key, objs in results.items() :
        scs_sync_array_time_dwl[key]=[]
        values[key]=[]
        for scs_sync in objs["scs_syncs_dwl"]:
            scs_sync_array_time_dwl[key].append(scs_sync["time"])
            scs_sync_array_value_dwl[scs_sync["time"]]=scs_sync["value"]
            scs_sync_array_server_dwl[scs_sync["time"]]=key
        for obj in objs["dwl_dwl"]:
            if (int(obj["syncid"]) in scs_sync_array_time_dwl[key]):
                values[key].append(obj["value"])
                if values_syncid_dwl.has_key(obj["syncid"]):
                    values_syncid_dwl[obj["syncid"]].append(obj["time"])
                else:
                    values_syncid_dwl[obj["syncid"]]=[obj["time"]]
        for obj in objs["dwl_upl"]:
            if (int(obj["syncid"]) in scs_sync_array_time_dwl[key]):
                if values_syncid_dwl.has_key(obj["syncid"]):
                    values_syncid_dwl[obj["syncid"]].append(obj["time"])
                else:
                    values_syncid_dwl[obj["syncid"]]=[obj["time"]]
        values[key] = np.array(values[key])
        global_max.append(np.max(values[key]))
        global_min.append(np.min(values[key]))
        
    global_max = (np.max(global_max))
    global_min = (np.min(global_min))
    
    for key, objs in results.items() :
        histbins = 10 ** np.linspace(np.log10(global_min), np.log10(global_max), 100)
        n, bins, patches = ax.hist(values[key], bins=histbins, normed=True, cumulative=True, histtype='step')
        Graph.append(patches[0]) 
        Marks.append(key)
    ax.legend(Graph,Marks,fontsize=7,fancybox=True, loc='upper left').get_frame().set_alpha(0.5)
    ax.set_xscale("log")
    ax.set_xlim(left=global_min)
    ax.set_xlim(right=global_max)
    ax.set_ylim(top=1.0)
    xtickNames = []
    xticks = ax.get_xticks().tolist()
    for xtick in xticks:
        xtickNames.append(sizeof_fmt(int(xtick)))
    ax.set_xticklabels(xtickNames)
    ax.set_xlabel('Logaritmic scale - Transfer rate [unit/s]')
    plt.grid(True)
    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    
    #transfer graph - UPLOADING - IDLE TIME
    fig2 = plt.figure() 
    fig2.suptitle('Monitoring - Histogram - Different Servers\nMachine: %s'%(runid))
    ax = fig2.add_subplot(321)
    plt.title("Client to Server Sync\nFirst-Last packet time to sync time", fontsize=12)  
    values_server = {}
    values_server_sum = {}
    values_server_diff = {}
    Graph = []
    Marks = []
    global_min = []
    for key, objs in values_syncid_upl.items():   
        if not values_server.has_key(scs_sync_array_server_upl[int(key)]):
            values_server[scs_sync_array_server_upl[int(key)]]=[]
            
        if not values_server_sum.has_key(scs_sync_array_server_upl[int(key)]):
            values_server_sum[scs_sync_array_server_upl[int(key)]]=[]
          
        if not values_server_diff.has_key(scs_sync_array_server_upl[int(key)]):
            values_server_diff[scs_sync_array_server_upl[int(key)]]=[]  
        objs.sort()     
        obj_zero = objs[0]/1000000.0
        obs_len = len(objs)
        sum_diff=0.0
        for i in range(1, obs_len):
            difference = objs[i]/1000000.0-obj_zero
            if difference>1.0:
                fraction=((difference-1.0)/scs_sync_array_value_upl[int(key)])*100
                values_server[scs_sync_array_server_upl[int(key)]].append(fraction)
                sum_diff=sum_diff+difference-1.0
            obj_zero = objs[i]/1000000.0
        values_server_sum[scs_sync_array_server_upl[int(key)]].append(((objs[obs_len-1]/1000000.0-objs[0]/1000000.0)/scs_sync_array_value_upl[int(key)])*100)
        values_server_diff[scs_sync_array_server_upl[int(key)]].append((sum_diff/scs_sync_array_value_upl[int(key)])*100)
        global_min.append(np.min(np.array(values_server_sum[scs_sync_array_server_upl[int(key)]])))
    
    global_min = (np.min(global_min))
    for key, objs in results.items() :
        n, bins, patches = ax.hist(values_server_sum[key], bins=100, normed=True, cumulative=True, histtype='step', range=(global_min, 100))
        Graph.append(patches[0]) 
        Marks.append(key)
    ax.set_xlim(left=global_min)
    ax.set_xlim(right=100)
    ax.legend(Graph,Marks,fontsize=7,fancybox=True, loc='upper left').get_frame().set_alpha(0.5)
    ax.set_xlabel('Fraction [%]')
    plt.grid(True)
    plt.tight_layout(rect=[0, 0.03, 1, 0.95]) 
    
    ax = fig2.add_subplot(323)
    plt.title("Client to Server Sync\nNo transfer periods duration to sync time", fontsize=12) 
    Graph = []
    Marks = []
    for key, objs in results.items():
        n, bins, patches = ax.hist(values_server[key], bins=100, normed=True, cumulative=True, histtype='step')
        Graph.append(patches[0]) 
        Marks.append(key)
    ax.legend(Graph,Marks,fontsize=7,fancybox=True, loc='lower right').get_frame().set_alpha(0.5)
    ax.set_xlabel('Fraction [%]')
    plt.grid(True)
    plt.tight_layout(rect=[0, 0.03, 1, 0.95]) 
    
    ax = fig2.add_subplot(325)
    plt.title("Client to Server Sync\nNo transfer total time to sync time", fontsize=12) 
    Graph = []
    Marks = []
    for key, objs in results.items():
        n, bins, patches = ax.hist(values_server_diff[key], bins=100, normed=True, cumulative=True, histtype='step')
        Graph.append(patches[0]) 
        Marks.append(key)
    ax.legend(Graph,Marks,fontsize=7,fancybox=True, loc='lower right').get_frame().set_alpha(0.5)
    ax.set_xlabel('Fraction [%]')
    plt.grid(True)
    plt.tight_layout(rect=[0, 0.03, 1, 0.95]) 
    #transfer graph - DOWNLOADING - IDLE TIME
    ax = fig2.add_subplot(322)
    plt.title("Server to Client Sync\nFirst-Last packet time to sync time", fontsize=12)  
    values_server = {}
    values_server_sum = {}
    values_server_diff = {}
    Graph = []
    Marks = []
    global_min = []
    for key, objs in values_syncid_dwl.items():    
        if not values_server.has_key(scs_sync_array_server_dwl[int(key)]):
            values_server[scs_sync_array_server_dwl[int(key)]]=[]
            
        if not values_server_sum.has_key(scs_sync_array_server_dwl[int(key)]):
            values_server_sum[scs_sync_array_server_dwl[int(key)]]=[]
        
        if not values_server_diff.has_key(scs_sync_array_server_dwl[int(key)]):
            values_server_diff[scs_sync_array_server_dwl[int(key)]]=[]
        objs.sort() 
        obj_zero = objs[0]/1000000.0
        obs_len = len(objs)
        sum_diff=0.0
        for i in range(1, obs_len):
            difference = objs[i]/1000000.0-obj_zero
            if difference>1.0:
                fraction=((difference-1.0)/scs_sync_array_value_dwl[int(key)])*100
                values_server[scs_sync_array_server_dwl[int(key)]].append(fraction)
                sum_diff=sum_diff+difference-1.0
            obj_zero = objs[i]/1000000.0
        values_server_sum[scs_sync_array_server_dwl[int(key)]].append(((objs[obs_len-1]/1000000.0-objs[0]/1000000.0)/scs_sync_array_value_dwl[int(key)])*100)
        values_server_diff[scs_sync_array_server_dwl[int(key)]].append((sum_diff/scs_sync_array_value_dwl[int(key)])*100)
        global_min.append(np.min(np.array(values_server_sum[scs_sync_array_server_dwl[int(key)]])))
    
    global_min = (np.min(global_min))
    for key, objs in results.items() :
        n, bins, patches = ax.hist(values_server_sum[key], bins=100, normed=True, cumulative=True, histtype='step', range=(global_min, 100))
        Graph.append(patches[0]) 
        Marks.append(key)
    ax.set_xlim(left=global_min)
    ax.set_xlim(right=100)
    ax.legend(Graph,Marks,fontsize=7,fancybox=True, loc='upper left').get_frame().set_alpha(0.5)
    ax.set_xlabel('Fraction [%]')
    plt.grid(True)
    plt.tight_layout(rect=[0, 0.03, 1, 0.95]) 
    
    ax = fig2.add_subplot(324)
    plt.title("Server to Client Sync\nNo transfer periods duration to sync time", fontsize=12) 
    Graph = []
    Marks = []
    for key, objs in results.items():
        n, bins, patches = ax.hist(values_server[key], bins=100, normed=True, cumulative=True, histtype='step')
        Graph.append(patches[0]) 
        Marks.append(key)
    ax.legend(Graph,Marks,fontsize=7,fancybox=True, loc='lower right').get_frame().set_alpha(0.5)
    ax.set_xlabel('Fraction [%]')
    plt.grid(True)
    plt.tight_layout(rect=[0, 0.03, 1, 0.95]) 
    
    ax = fig2.add_subplot(326)
    plt.title("Server to Client Sync\nNo transfer total time to sync time", fontsize=12) 
    Graph = []
    Marks = []
    for key, objs in results.items():
        n, bins, patches = ax.hist(values_server_diff[key], bins=100, normed=True, cumulative=True, histtype='step')
        Graph.append(patches[0]) 
        Marks.append(key)
    ax.legend(Graph,Marks,fontsize=7,fancybox=True, loc='lower right').get_frame().set_alpha(0.5)
    ax.set_xlabel('Fraction [%]')
    plt.grid(True)
    plt.tight_layout(rect=[0, 0.03, 1, 0.95]) 
    #end
    plt.draw()   
def compare_time_runid(results,server, max_y):
    xTickMarks = range(0,25)
    ind = np.arange(len(xTickMarks)) 
    width = 1                      # the width of the bars
    global_max = []
    
    for key, objs in results.items() :
        for obj in objs[0]:
            global_max.append(obj["value"])  
    if max_y == None:  
        global_max= (np.max(global_max)) + 10 
    else:
        global_max=max_y 
    
    for key, supobjs in results.items() :
        fig = plt.figure()
        for k in range(len(supobjs)):
            values = [] 
            objs=supobjs[k]
            for i in range(0,24):
                values.append([])
            ax = fig.add_subplot('21%s'%(k+1))
            for obj in objs:
                hour = get_hour_from_timestamp(obj["time"])
                values[hour].append(obj["value"])
            
            for i in range(0,24):
                # min/max
                midpoint = i+0.5
                x= values[i]
                perc = [min(x), scoreatpercentile(x,5), scoreatpercentile(x,25),
                       scoreatpercentile(x,50), scoreatpercentile(x,75),
                       scoreatpercentile(x,95), max(x)]
                
                ax.broken_barh([(midpoint-.005,.01)], (perc[0], perc[1]-perc[0]), facecolors='black')
                ax.broken_barh([(midpoint-.005,.01)], (perc[5], perc[6]-perc[5]), facecolors='black')
                # 10/90
                ax.broken_barh([(midpoint-.4,.8)], (perc[1], perc[2]-perc[1]), facecolors='b')
                ax.broken_barh([(midpoint-.4,.8)], (perc[4], perc[5]-perc[4]), facecolors='b')
                # 25/75
                ax.broken_barh([(midpoint-.4,.8)], (perc[2], perc[3]-perc[2]), facecolors='y')
                ax.broken_barh([(midpoint-.4,.8)], (perc[3], perc[4]-perc[3]), facecolors='y')
                    
            ax.set_xticks(ind)
            ax.set_ylim(bottom=0, top=global_max)
            ax.set_xlim(left=0, right=24)
            xtickNames = ax.set_xticklabels(xTickMarks)
            plt.setp(xtickNames, rotation=45, fontsize=10)
            if k==0:
                title='Upload'
            else:
                title='Download'
            plt.title(title)
            plt.tight_layout(rect=[0, 0.03, 1, 0.90])
        fig.suptitle('Monitoring - %s\nDistributions of synchronisation times during the day\nTest Machine: %s'%(server,key))
        plt.draw()

def compare_files_runid(results,tot_err,server):
    fig = plt.figure() 
    fig.suptitle('Monitoring - Histogram - Different Machines\nServer: %s'%(server))
    ax = fig.add_subplot(121)
    bx = fig.add_subplot(122)
    values = []
    passed = []
    failed = []
    xTickMarks_a = []
    xTickMarks_b = []
    xTickGraph_a = []
    xTickGraph_b = []
    global_max = []
    for key, objs in results.items() :
        tmp_values = []
        for obj in objs:
            tmp_values.append(obj["value"])
        size = len(tmp_values)  
        tmp_values = np.array(tmp_values) 
        global_max.append(np.max(tmp_values))
        values.append(tmp_values)
        
        xTickMarks_a.append(key)
        
    for key, objs in tot_err.items() :
        passed_values = []
        failed_values = []
        objs_range=len(objs[0])
        for i in range(0,objs_range):
            if objs[0][i]["count"]:
                obj1=float(objs[0][i]["count"])
            else:
                obj1=0.0
            if objs[1][i]["count"]:
                obj2=float(objs[1][i]["count"])
            else:
                obj2=0.0
            obj3=obj1+obj2
            failed_values.append(obj1/obj3*100)
            passed_values.append(obj2/obj3*100)
        failed_values = np.array(failed_values) 
        passed_values = np.array(passed_values) 
        passed.append(passed_values)
        failed.append(failed_values)
        xTickMarks_b.append(key)
        
    global_max= (np.max(global_max)) + 10   
    ax.set_xlim(left=0)
    ax.set_xlim(right=global_max)
    ax.set_ylim(top=1.1)
    bx.set_ylim(top=100)
    ind = np.arange(len(xTickMarks_b))                # the x locations for the groups
    width = 0.9                      # the width of the bars
    
    # the histogram of the data
    for value in values:
        n, bins, patches = ax.hist(value, bins=100, cumulative=True, normed=True, histtype='step', range=(0,global_max))
        xTickGraph_a.append(patches[0])
    
    bx.set_xlim(left=-0.1) 
    bx.set_xlim(right=2)     
    passed_bar = bx.bar(ind, passed, width, color='b',bottom=failed)
    xTickGraph_b.append(passed_bar[0])
    failed_bar = bx.bar(ind, failed, width, color='y')
    xTickGraph_b.append(failed_bar[0])
    ax.set_xlabel('Total files synced [n]')
    ax.set_ylabel('Probability')
    bx.set_xlabel('Total errors for different machines [n]')
    bx.set_ylabel('Percentage [%]')
    ax.legend(xTickGraph_a,xTickMarks_a)
    bx.legend(xTickGraph_b,('Passed', 'Failed'))
    bx.set_xticks(ind+0.45)
    xtickNames = bx.set_xticklabels(xTickMarks_b)
    plt.setp(xtickNames, rotation=45, fontsize=12)
    ax.grid(True)
    bx.grid(False)
    plt.tight_layout(rect=[0, 0.03, 1, 0.90])
    plt.draw()
    
def run(testset_config): 
    config = testset_config["config"]
    client = InfluxDBClient(config["remote_storage_server"], 8086, config["remote_storage_user"], config["remote_storage_password"], config["remote_database"])
    
    tests = testset_config["tests"] 
    for test in tests:
        if test["test_name"]=="monit":
            for type in test["graph"]:
                if type["show"]==True and type["type"]=="compare-time-runid":
                    points = {}
                    server = type["server"]
                    for runid in type["runid"]:
                        tot_upl = client.query("SELECT value FROM \"%s-%s\" WHERE runid='%s' and server_name='%s' and worker_name='worker0' "%(test["test_name"],"syn",runid,server))
                        tot_dwl = client.query("SELECT value FROM \"%s-%s\" WHERE runid='%s' and server_name='%s' and worker_name='worker1' "%(test["test_name"],"syn",runid,server))
                        points[runid]=[list(tot_upl.get_points()),list(tot_dwl.get_points())]
                    compare_time_runid(points,server,type["max_y"])
                      
                if type["show"]==True and type["type"]=="cm-histogram-sync":
                    points = {}
                    for server in type["server"]:
                        tot = client.query("SELECT value FROM \"%s-%s\" WHERE runid='%s' and server_name='%s'"%(test["test_name"],"total-syn",type["runid"],server))
                        points[server]=list(tot.get_points())
                    compare_monit_cm_hist_sync(points,type["runid"])
                    
                if type["show"]==True and type["type"]=="percentile-sync-runid":
                    points = {}
                    server = type["server"]
                    for runid in type["runid"]:
                        tot_upl = client.query("SELECT value FROM \"%s-%s\" WHERE runid='%s' and server_name='%s' and worker_name='worker0' "%(test["test_name"],"syn",runid,server))
                        tot_dwl = client.query("SELECT value FROM \"%s-%s\" WHERE runid='%s' and server_name='%s' and worker_name='worker1' "%(test["test_name"],"syn",runid,server))
                        tot = client.query("SELECT value FROM \"%s-%s\" WHERE runid='%s' and server_name='%s'"%(test["test_name"],"total-syn",runid,server))
                        points[runid]=[list(tot.get_points()),list(tot_upl.get_points()),list(tot_dwl.get_points())]
                    percentile_sync_runid(points,server)
                    
                if type["show"]==True and type["type"]=="compare-files-runid":
                    tot_files = {}
                    tot_err = {}
                    server = type["server"]
                    for runid in type["runid"]:
                        tot_files_q = client.query("SELECT value FROM \"%s-%s\" WHERE runid='%s' and server_name='%s'"%(test["test_name"],"total-files",runid,server))
                        tot_failed_q = client.query("SELECT count(value) FROM \"%s-%s\" WHERE runid='%s' and server_name='%s' and worker_name='worker1' and value=1"%(test["test_name"],"err",runid,server))
                        tot_passed_q = client.query("SELECT count(value) FROM \"%s-%s\" WHERE runid='%s' and server_name='%s' and worker_name='worker1' and value=0"%(test["test_name"],"err",runid,server))
                        tot_files[runid]=list(tot_files_q.get_points())
                        tot_err[runid]=[list(tot_failed_q.get_points()),list(tot_passed_q.get_points())]
                    compare_files_runid(tot_files,tot_err,server)
                
                if type["show"]==True and type["type"]=="cm-histogram-transf":
                    points = {}
                    runid = type["runid"]
                    for server in type["server"]:
                        points[server] = {}
                        scs_syncs_upl = list((client.query("SELECT value FROM \"%s-%s\" WHERE runid='%s' and server_name='%s' and worker_name='worker0'"%(test["test_name"],"syn",runid,server), epoch='u')).get_points())
                        scs_syncs_dwl = list((client.query("SELECT value FROM \"%s-%s\" WHERE runid='%s' and server_name='%s' and worker_name='worker1'"%(test["test_name"],"syn",runid,server), epoch='u')).get_points())
                        upl_upl = list((client.query("SELECT value,syncid FROM \"%s-%s\" WHERE runid='%s' and server_name='%s'"%(test["test_name"],"0-upl",runid,server), epoch='u')).get_points())
                        dwl_dwl = list((client.query("SELECT value,syncid FROM \"%s-%s\" WHERE runid='%s' and server_name='%s'"%(test["test_name"],"1-dwl",runid,server), epoch='u')).get_points())
                        upl_dwl = list((client.query("SELECT value,syncid FROM \"%s-%s\" WHERE runid='%s' and server_name='%s'"%(test["test_name"],"0-dwl",runid,server), epoch='u')).get_points())
                        dwl_upl = list((client.query("SELECT value,syncid FROM \"%s-%s\" WHERE runid='%s' and server_name='%s'"%(test["test_name"],"1-upl",runid,server), epoch='u')).get_points())
                        
                        points[server]["upl_upl"]=upl_upl
                        points[server]["dwl_dwl"]=dwl_dwl
                        points[server]["upl_dwl"]=upl_dwl
                        points[server]["dwl_upl"]=dwl_upl
                        points[server]["scs_syncs_upl"]=scs_syncs_upl
                        points[server]["scs_syncs_dwl"]=scs_syncs_dwl
                    compare_monit_cm_hist_transf(points,runid,server)
    plt.show()                
def main(arguments):
    analyse_path = os.path.join(os.path.dirname(__file__),'analyse.config')
    if len(arguments)==1 and os.path.exists(analyse_path):
        print "takes %s config path"%analyse_path
        arguments.append(analyse_path)
    for arg_i in range(1, len(arguments)):
        testset_config = get_config(arguments[arg_i])
        run(testset_config)            
       
if __name__ == '__main__':
    """    """
    arguments = sys.argv
    main(arguments)




