#!/usr/bin/python
import sys,os, subprocess
from influxdb import InfluxDBClient
import numpy as np
import datetime
import bz2

def get_config(path):
    import io    
    path = os.path.abspath(path)    
    if (os.path.exists(path)):
        with io.open(path,'r') as file:
            data = eval(file.read())
        return data 
    else:
        print "path does not exists %s"%path
        sys.exit()
        
def compress_to_file(data, file_name,index):
    import io
    home = os.path.join(os.path.expanduser("~"),"smashbox-backup",file_name)
    if not(os.path.exists(home)):
        subprocess.call("mkdir -p %s"%home, shell=True)
    file_path = "%s%s"%(os.path.join(home,index),".bz2")
    output = bz2.BZ2File(file_path, 'wb')
    try:
        output.write(bz2.compress(str(data)))
    finally:
        output.close()
        print "[PULL] Finished compression %s"%index
        return home
        
def get_data_from_bz2(file_path):
    import simplejson
    import os
    bs2_listed = os.listdir(file_path)
    result = {}
    for bs2_file in bs2_listed:
        file = os.path.join(file_path,bs2_file)
        input_file = bz2.BZ2File(file, 'rb')
        try:
            data = input_file.read()
            print "[PUSH] Read data from compresed file %s, decompresing...."%bs2_file
        except Exception, e:
            print e
        finally:
            input_file.close() 
            data = eval(bz2.decompress(data))
            for key, objs in data.items() : 
                if result.has_key(key):
                    result[key]=result[key] + objs
                else:
                    result[key]=objs
    return result

def pull(config):
    client = InfluxDBClient(config["remote_storage_server"], 8086, config["remote_storage_user"], config["remote_storage_password"], config["remote_database"])
    
    q = "SHOW MEASUREMENTS;"
    series_raw = list((client.query(q)).get_points())
    series = []
    for serie in series_raw:
        series.append(serie["name"])
    print series
    print "[PULL] Got list of series"
    result_dict = {}
    now = (datetime.datetime.now()).strftime('%s%f')
    file_name = datetime.datetime.fromtimestamp(float(now)/ 1000000.0).isoformat()
    for serie in series:
        if serie.find("pkt")==-1:
            q = "SELECT * FROM \"%s\" WHERE time <= %su;"%(serie,now)
            result_dict = list((client.query(q)).get_points())
            result_dict_len = len(result_dict)
            
            i=result_dict_len-10000
            if i<=0:
                file_path = compress_to_file({serie:result_dict[0:result_dict_len]}, file_name,"%s%s"%(serie,result_dict_len))
                #print "done","%s to %s"%(0,result_dict_len),serie,result_dict_len
            else:
                while i>0:
                    file_path = compress_to_file({serie:result_dict[result_dict_len-i-10000:result_dict_len-i]}, file_name,"%s%s"%(serie,result_dict_len-i))
                    #print "done","%s to %s"%(result_dict_len-i-10000,result_dict_len-i),serie,result_dict_len
                    if i-10000<=0:
                        file_path = compress_to_file({serie:result_dict[result_dict_len-i:result_dict_len]}, file_name,"%s%s"%(serie,result_dict_len))
                        #print "done","%s to %s"%(result_dict_len-i,result_dict_len),serie,result_dict_len
                    i=i-10000
                    
    print "[PULL] Got backup of series in %s"%file_path
    
def push(config):
    try:
        client = InfluxDBClient(config["remote_storage_server"], 8086, config["remote_storage_user"], config["remote_storage_password"], config["remote_database"])
        file_path = config["bz2_path"]  
        if not os.path.exists(file_path):
            raise Exception
        print "[PUSH] File exists, pushing %s .."%file_path
        data = get_data_from_bz2(file_path)
        if not data:
            raise Exception
        print "[PUSH] Decompressed and evaluated"
        measurements = []
        for key, objs in data.items() :
            for obj in objs:
                tags = {}
                for obj_key, obj_value in obj.items():
                    if obj_key=="value":
                        value = float(obj_value)
                    elif obj_key=="time":
                        time = str(obj_value)
                    else:
                        tags.update({str(obj_key):str(obj_value)})
                measurement = {
                    "measurement": str(key),
                    "tags": tags,
                    "time": time,
                    "fields": {
                        "value": value,
                    }
                }
                measurements.append(measurement)
        print "[PUSH] Measurements ready to send, sending.."
        client.write_points(measurements, batch_size=1024)
        print "[PUSH] Sent to the remote. Finished"
    except Exception, e:
        print "[CONFIG] %s"%e
        print "[CONFIG] Please specify <push> <backup config path> and valid bz2_path to valid bz2 file in config file"
    
def main(arguments):
    analyse_path = os.path.join(os.path.dirname(__file__),'backup.config')
    if len(arguments)==1:
        print "[CONFIG] Please specify <push/pull> <backup config path>"
        sys.exit()
    elif len(arguments)==2 and os.path.exists(analyse_path):
        print "[CONFIG] Takes %s config path"%analyse_path
        arguments.append(analyse_path)
        
    config = get_config(arguments[2])
    
    if(arguments[1]=="pull"): 
        print "[INIT] Pulling"
        pull(config[arguments[1]])  
    elif(arguments[1]=="push"): 
        print "[INIT] Pushing"
        push(config[arguments[1]])  
    else:
        print "[INIT]wrong syntax, please specify <push/pull> <backup config path>"    
       
if __name__ == '__main__':
    """    """
    arguments = sys.argv
    main(arguments)




